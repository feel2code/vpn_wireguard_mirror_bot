import asyncio
import logging
import shlex
import subprocess
import sys
from os import getenv
from uuid import uuid4

from aiogram import Bot, Dispatcher, F, Router, html
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import (CallbackQuery, FSInputFile, InlineKeyboardMarkup,
                           LabeledPrice, Message, PreCheckoutQuery)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv

from db_tools import (check_subscription_end, get_obfuscated_user_conf,
                      need_to_update_user)

logger = logging.getLogger(__name__)
invoices_router = Router(name=__name__)


load_dotenv(".env")
DEMO_REGIME = bool(int(getenv("DEMO_REGIME")))
SERVICE_NAME = getenv("SERVICE_NAME")
ADMIN = getenv("ADMIN")
TOKEN = getenv("BOT_TOKEN")
FS_USER = getenv("FS_USER")
HOST_AND_PORT = getenv("HOST_AND_PORT")
dp = Dispatcher()

if DEMO_REGIME:
    ccy = {
        "30": {
            "payload": "demo_30",
            "value": 1,
        },
        "60": {
            "payload": "demo_60",
            "value": 2,
        },
        "90": {
            "payload": "demo_90",
            "value": 3,
        },
        "proxy": {
            "payload": "demo_proxy",
            "value": 1,
        },
    }
else:
    ccy = {
        "30": {
            "payload": "real_30",
            "value": 91,
        },
        "60": {
            "payload": "real_60",
            "value": 170,
        },
        "90": {
            "payload": "real_90",
            "value": 250,
        },
        "proxy": {
            "payload": "real_proxy",
            "value": 100,
        },
    }


def subscribe_management_kb() -> InlineKeyboardMarkup:
    """
    subscribe management keyboard
    """
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ûï –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe")
    kb.button(text="‚ÑπÔ∏è  –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="instruction")
    kb.button(
        text="üëΩ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_end_date_of_subscription"
    )
    kb.adjust(2, 2, 1)
    return kb.as_markup()


def home_kb() -> InlineKeyboardMarkup:
    """
    home keyboard
    """
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ûï –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe")
    kb.button(text="üò¢ –ù–∞–∑–∞–¥", callback_data="home")
    kb.adjust(2, 2, 1)
    return kb.as_markup()


def accept_kb() -> InlineKeyboardMarkup:
    """
    accept terms of service
    """
    kb = InlineKeyboardBuilder()
    kb.button(text="–ü–†–ò–ù–ò–ú–ê–Æ", callback_data="accept")
    kb.adjust(2, 2, 1)
    return kb.as_markup()


@invoices_router.callback_query(F.data.startswith("check_end_date_of_subscription"))
async def check_end_date_of_subscription(call: CallbackQuery) -> None:
    """
    check end date of the subscription
    """
    conf_to_check = get_obfuscated_user_conf(call.from_user.id)
    if conf_to_check:
        vpn_check = check_subscription_end(call.from_user.id, is_proxy=0)
        proxy_check = check_subscription_end(call.from_user.id, is_proxy=1)
        if vpn_check:
            await call.message.answer(
                f"""–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ VPN –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:
                {str(vpn_check)[:-7]}"""
            )
        if proxy_check:
            await call.message.answer(
                f"""–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ PROXY –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:
                {str(proxy_check)[:-7]}"""
            )
        return
    await call.message.answer(
        f"–î–µ–π—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {SERVICE_NAME} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!",
    )


@invoices_router.callback_query(F.data.startswith("subscribe"))
async def subscribe(call: CallbackQuery) -> None:
    """
    subscribe to the service
    """
    await call.message.answer_invoice(
        title="–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É VPN",
        description=f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π –Ω–∞ {SERVICE_NAME} VPN",
        prices=[
            LabeledPrice(label=ccy["30"]["payload"].title(), amount=ccy["30"]["value"]),
        ],
        payload=ccy["30"]["payload"],
        currency="XTR",
    )
    await call.message.answer_invoice(
        title="–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É VPN",
        description=f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 60 –¥–Ω–µ–π –Ω–∞ {SERVICE_NAME} VPN",
        prices=[
            LabeledPrice(label=ccy["60"]["payload"].title(), amount=ccy["60"]["value"]),
        ],
        payload=ccy["60"]["payload"],
        currency="XTR",
    )
    await call.message.answer_invoice(
        title="–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É VPN",
        description=f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 90 –¥–Ω–µ–π –Ω–∞ {SERVICE_NAME} VPN",
        prices=[
            LabeledPrice(label=ccy["90"]["payload"].title(), amount=ccy["90"]["value"]),
        ],
        payload=ccy["90"]["payload"],
        currency="XTR",
    )
    await call.message.answer_invoice(
        title="–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É PROXY",
        description=f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π –Ω–∞ {SERVICE_NAME} PROXY",
        prices=[
            LabeledPrice(
                label=ccy["proxy"]["payload"].title(), amount=ccy["proxy"]["value"]
            ),
        ],
        payload=ccy["proxy"]["payload"],
        currency="XTR",
    )


@invoices_router.message(F.successful_payment)
async def successful_payment(message: Message, bot: Bot) -> None:
    """
    Successful payment handler and create config file
    then send it to the user
    """
    user_id = message.from_user.id
    uuid_gen = str(uuid4())[:13]

    if DEMO_REGIME:
        await bot.refund_star_payment(
            user_id=message.from_user.id,
            telegram_payment_charge_id=message.successful_payment.telegram_payment_charge_id,
        )
        await message.answer("Demo. Your payment has been refunded.")
        need_to_update_user(
            user_id=user_id,
            obfuscated_user=f"{uuid_gen}",
            invoice_payload=message.successful_payment.invoice_payload,
        )
        return

    await message.answer(
        f"""–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {SERVICE_NAME}!
        –í–∞—à ID –ø–ª–∞—Ç–µ–∂–∞: {message.successful_payment.telegram_payment_charge_id}""",
        message_effect_id="5104841245755180586",  # stars effect
    )
    if not need_to_update_user(
        user_id=user_id,
        obfuscated_user=f"{uuid_gen}",
        invoice_payload=message.successful_payment.invoice_payload,
    ):
        # PROXY
        if message.successful_payment.invoice_payload == "real_proxy":
            proxy_key = str(uuid4())[:13]
            subprocess.run(
                shlex.split(
                    f"/{FS_USER}/vpn_wireguard_mirror_bot/./create_proxy.sh {uuid_gen} {proxy_key}"
                ),
                check=False,
            )
            await bot.send_message(
                chat_id=message.from_user.id,
                text=(
                    f"–•–æ—Å—Ç: {HOST_AND_PORT}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {uuid_gen}\n–ü–∞—Ä–æ–ª—å: {proxy_key}"
                ),
            )
            return
        # VPN
        subprocess.run(
            shlex.split(
                f"/{FS_USER}/vpn_wireguard_mirror_bot/./create_config.sh {uuid_gen}"
            ),
            check=False,
        )
        await bot.send_document(
            chat_id=user_id,
            document=FSInputFile(f"/{FS_USER}/{uuid_gen}.conf"),
        )
        return

    await message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞.")


@invoices_router.callback_query(F.data.startswith("instruction"))
async def get_instruction(call: CallbackQuery) -> None:
    """
    instruction for the service install
    """
    await call.message.answer(
        f"""
        –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ VPN:
        1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Wireguard –Ω–∞ —Å–≤–æ–π —Å–º–∞—Ä—Ç—Ñ–æ–Ω

        * –î–ª—è iOS: https://apps.apple.com/us/app/wireguard/id1441195209
        * –î–ª—è Android: https://play.google.com/store/apps/details?id=com.wireguard.android

        2. –ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {SERVICE_NAME}.

        3. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –≤–∞–º –ø—Ä–∏–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ
        –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.

        –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!

        –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ @feel2code
        """.replace(
            "  ", ""
        ),
        reply_markup=home_kb(),
    )


@invoices_router.pre_checkout_query(F.invoice_payload)
async def pre_checkout_query(query: PreCheckoutQuery) -> None:
    """
    Pre-checkout query handler
    """
    await query.answer(ok=True)


@invoices_router.callback_query(F.data.startswith("home"))
async def home_menu(call: CallbackQuery) -> None:
    """
    returns user to the home menu
    """
    await call.message.answer(
        f"–í—ã –≥–æ—Ç–æ–≤—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {SERVICE_NAME}?",
        reply_markup=subscribe_management_kb(),
    )


@invoices_router.callback_query(F.data.startswith("accept"))
async def accept_call(call: CallbackQuery) -> None:
    """
    returns user to the home menu
    """
    await call.message.answer(
        f"–í—ã –≥–æ—Ç–æ–≤—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {SERVICE_NAME}?",
        reply_markup=subscribe_management_kb(),
    )


@invoices_router.message(Command("start"))
async def command_start_handler(message: Message) -> None:
    """
    This handler receives messages with `/start` command
    """
    await message.answer(
        f"""–ü—Ä–∏–≤–µ—Ç, {html.bold(message.from_user.full_name)}!
            –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∏ –æ–ø–ª–∞—Ç—ã,
            –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞.

            –ü—Ä–∏–Ω–∏–º–∞—è —É—Å–ª–æ–≤–∏—è —Å–µ—Ä–≤–∏—Å–∞, –í—ã –ø—Ä–∏–∑–Ω–∞–µ—Ç–µ, —á—Ç–æ –Ω–µ—Å–µ—Ç–µ
            –ø–æ–ª–Ω—É—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞.
            –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ –æ–¥–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.
            –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–µ—Ä–≤–∏—Å,
            –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ –Ω–∞ 30, 60 –∏–ª–∏ 90 –¥–Ω–µ–π.
            –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–ø–ª–∞—Ç–µ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç—Å—è.

            –¢–∞–∫–∂–µ –µ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ PROXY –Ω–∞ 30 –¥–Ω–µ–π.

            –ü—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞?
        """.replace(
            "  ", ""
        ),
        reply_markup=accept_kb(),
    )


async def main() -> None:
    """Initialize Bot instance with default bot properties which will be passed to all API calls"""
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp.include_router(invoices_router)

    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
